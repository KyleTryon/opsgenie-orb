description: Send build results to Opsgenie API, with detailed information

parameters:
  endpoint:
    type: string
    description: "Enter either your Full URL value or use the CircleCI UI to add your token under the 'OPSGENIE_WEBHOOK' env var"
    default: ${OPSGENIE_WEBHOOK}
  on_failure:
    type: boolean
    default: false
    description: "Failure information of circleci build"
  on_success:
    type: boolean
    default: true
    description: "Success information of circleci build"
steps:
  - run:
      when: always
      name: Bundle build info into webhook payload
      command: |
         echo '{}' | jq '{
          "payload": {
            "workflow_job_id": env.CIRCLE_WORKFLOW_JOB_ID,
            "build_num": env.CIRCLE_BUILD_NUM,
            "node_version": env.NODE_VERSION,
            "hostname": env.HOSTNAME,
            "node_total": env.CIRCLE_NODE_TOTAL,
            "workflow_upstream_job_ids": env.CIRCLE_WORKFLOW_UPSTREAM_JOB_IDS,
            "internal_scratch": env.CIRCLE_INTERNAL_SCRATCH,
            "project_username": env.CIRCLE_PROJECT_USERNAME,
            "npm_config_loglevel": env.NPM_CONFIG_LOGLEVEL,
            "internal_task_data": env.CIRCLE_INTERNAL_TASK_DATA,
            "no_proxy": env.NO_PROXY,
            "node_index": env.CIRCLE_NODE_INDEX,
            "compare_url": env.CIRCLE_COMPARE_URL,
            "branch": env.CIRCLE_BRANCH,
            "ssh_auth_sock": env.SSH_AUTH_SOCK,
            "job_name": env.CIRCLE_JOB,
            "working_directory": env.CIRCLE_WORKING_DIRECTORY,
            "path": env.PATH,
            "workflow_workspace_id": env.CIRCLE_WORKFLOW_WORKSPACE_ID,
            "username": env.CIRCLE_USERNAME,
            "previous_build_num": env.CIRCLE_PREVIOUS_BUILD_NUM,
            "pwd": env.PWD,
            "stage": env.CIRCLE_STAGE,
            "lang": env.LANG,
            "build_url": env.CIRCLE_BUILD_URL,
            "workflow_id": env.CIRCLE_WORKFLOW_ID,
            "circleci": env.CIRCLECI,
            "shlvl": env.SHLVL,
            "home": env.HOME,
            "yarn_version": env.YARN_VERSION,
            "vcs_revision": env.CIRCLE_SHA1,
            "ci": env.CI,
            "repository_url": env.CIRCLE_REPOSITORY_URL,
            "internal_config": env.CIRCLE_INTERNAL_CONFIG,
            "bash_env": env.BASH_ENV,
            "shell_env": env.CIRCLE_SHELL_ENV,
            "debian_frontend": env.DEBIAN_FRONTEND,
            "reponame": env.CIRCLE_PROJECT_REPONAME,
            "outcome": "unknown"
          }
          }' > /tmp/raw-webhook.json

  - when:
      condition: <<parameters.on_success>>
      steps:
        - run:
            when: on_success
            name: Notify <<parameters.endpoint>> with Success Webhook
            command: |
               cat /tmp/raw-webhook.json | jq '.payload.outcome="success"' > /tmp/webhook.json
               curl -X POST -H"Content-Type:application/json" -d @/tmp/webhook.json "<<parameters.endpoint>>"

  - when:
      condition: <<parameters.on_failure>>
      steps:
        - run:
            when: on_fail
            name: Notify <<parameters.endpoint>> with Failure Webhook
            command: |
               cat /tmp/raw-webhook.json | jq '.payload.outcome="failed"'  > /tmp/webhook.json
               curl -X POST -H"Content-Type:application/json" -d @/tmp/webhook.json "<<parameters.endpoint>>"
